namespace StructApp;

public struct StructEmployee
{
     public double salarioBase, comision;

    public StructEmployee(int salarioBase, int comision)
    {
        this.salarioBase=salarioBase;
        this.comision=comision;

    }

    public override string ToString()
    {
        return string.Format("Salario y comision del employee ${0} y ${1}", this.salarioBase, this.comision);
    }

    public void cambioSalario(StructEmployee emp, double incremento)
    {
        emp.salarioBase+=incremento;
        emp.comision+=incremento;
    }

    public void Test(double comision)
    {
        this.salarioBase+=comision;
        this.comision+=comision;
    }
}


/*
LAS STRUCTS SE ALMACENAN EN EL STACK A DIFERENCIA DE LAS CLASES LAS CUALES SE ALMACENAN EN EL HEAP Y SE GUARDA UNA REFERENCIA EN EL STACK, POR LO QUE CUANDO SE INSTANCIA UNA STRUCT SE CREA UNA COPIA EN EL STACK Y CADA MODIFICACION QUE SE REALIZE SOBRE ESA INSTANCIA SE CREA UNA NUEVA COPIA.
CARACTERISTICAS DE LAS STRUCT ES QUE SON DE RAPIDO ACCESO, ES TEMPORAL, POR EJEMPLO SI DECLARAMOS UNA VARIABLE DENTRO DE UN METODO, CUANDO ESTE TERMINA SU EJECUCION ESTE SE DESTRUYE.
OTRAS CARACTERISTICAS:
-NO PERMITE LA DECLARACION DEL CONSTRUCTOR POR DEFECTO
-EL COMPILADOR NO INICIA LOS CAMPOS. PUEDE INICIARLOS EN EL CONSTRUCTOR
-NO PERMITE SOBRECARGA DE CONSTRUCTORES
-NO HEREDAN DE OTRAS CLASES PERO SI IMPLEMENTAN INTERFACES
-SON SELLADAS SEALED, QUIERE DECIR QUE TAMPOCO OTRAS CLASES PUEDEN HEREDAR DE UNA STRUCT

CUANDO USAR STRUCT:
-CUANDO NECESITES TRABAJAR CON UNA CANTIDAD ELEVADA DE DATOS EN MEMORIA (REPRESENTACION DE PRIMITIVOS, NUM COMPLEJOS, PUNTOS TRIDIMENSIONALES)
-CUANDO LAS INSTANCIAS NO DEBAN CAMBIAR, ES DECIR QUE SEAN INMUTABLES
-CUANDO LA INSTANCIA TENGA TAMAÑO INFERIOR A 16BYTES
-CUANDO NO NECESITES CONVERTIR A OBJETO (BOXED)
-POR RAZONES DE RENDIMIENTO
*/